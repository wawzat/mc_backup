#!/bin/bash
# This script is intended to be run by cron for periodic backups of Minecraft data.
# The script scans the logs for player names, the number of times they've joined and the most recent date they've joined.
# The number of times they have joined is used to limit the player names that trigger a backup to only those payers who have joined at least minimum_plays times.
# The log search is used as criteria to determine if a backup is required. If a player with more than minimum_plays has 
#   joined since the last backup then a backup is required.
# Sample cron entry 0 10 * * * /home/mcserver/minecraft/mc_backup/backup_mc_daily runs the script at 10:00 AM every day.
# James S. Lucas - 20230802

# Configuration variables, change according to your particulars
use_rclone="False" # Set to True to use rclone to copy the backup to a cloud storage provider. You must install and setup rclone for this to work.
rclone_remote="google_drive" # The name of the rclone remote to use
num_days=5  # Number of days to keep backups for
minimum_plays=5 # Minimum number of game joins required to include a player name in the backup criteria
backup_path="/home/mcserver/minecraft/backup"
log_search_path="/home/mcserver/minecraft/logs"
world_paths=(
  "/home/mcserver/minecraft/world"
  "/home/mcserver/minecraft/world_nether"
  "/home/mcserver/minecraft/world_the_end"
  # Add more paths here if needed
)

# Change the directory to the log folder
cd "$log_search_path"

# Initialize associative array's to store player names and their occurrence count and player names and their most recent join date
declare -A player_counts
declare -A player_dates

# Loop through each .gz file in the logs directory
for file in *.gz; do
    # Use zgrep to search for player names and extract them
    names_found=$(zgrep -oE '[[:alnum:]_]+ joined the game' "$file" | awk '{print $1}')
    
    # Get the modification time of the log file
    file_date=$(stat -c %Y "$file")
    
    # Update the most recent date for each player name in the associative array
    for name in $names_found; do
        if [[ $file_date -gt ${player_dates["$name"]} ]]; then
            player_dates["$name"]=$file_date
        fi
        ((player_counts["$name"]++))
    done
done

# Initialize an empty array to store player names that meet the minimum play requirement
search_strings=()

# Loop through the associative array and filter player names based on the minimum_play count
for name in "${!player_counts[@]}"; do
    count="${player_counts[$name]}"
    if ((count >= minimum_plays)); then
        search_strings+=("$name")
    fi
done

# Initialize variables to store the most recent file and date
most_recent_file=""
most_recent_date="0000-00-00"  # Initialize with a date in the past

# Function to get the modification date of a file in "YYYY-MM-DD" format
get_file_date() {
    local file="$1"
    # Get the date of the file and format it as "YYYY-MM-DD"
    date -r "$file" +"%Y-%m-%d"
}

# Search for each search string (player name) in the player_dates array and determine the date of the most recent file containing a player name
for search_string in "${search_strings[@]}"; do
    # Get the most recent date for the current search string
    most_recent_date="${player_dates["$search_string"]}"
    # Loop through each world path and find the most recent backup file for the current search string
    for world_path in "${world_paths[@]}"; do
        # Use find to search for backup files containing the current search string
        while IFS= read -r file; do
            # Get the date of the file
            file_date=$(get_file_date "$file")
            # Compare the date of the current file with the most_recent_date
            if [[ "$file_date" > "$most_recent_date" ]]; then
                most_recent_file="$file"
                most_recent_date="$file_date"
            fi
        done < <(find "$world_path/$backup_path" -type f -name "*$search_string*.tar.gz")
    done
done

# Check if the most recent backup is earlier or later than the most recent log file containing a player name
if [[ "$most_recent_date" != "0000-00-00" ]]; then
    # Check if any files in /home/mcserver/minecraft/backup are newer than the most recent date
    if [[ $(find "$backup_path" -type f -newermt "$most_recent_date" 2>/dev/null) ]]; then
        result="True: Some files in $backup_path were created after $most_recent_date."
    else
        result="False: No files in $backup_path were created after $most_recent_date."
    fi
else
    result="None of the search strings found in any of the .log files."
fi

if [[ $result == *"False"* ]]; then
    # Execute the backup.
    screen -R mc -xX stuff "say Server backup starting. World not saving until complete...$(printf '\r')"
    screen -R mc -xX stuff "save-off$(printf '\r')"
    screen -R mc -xX stuff "save-all$(printf '\r')"
    sleep 3

    # Move the existing backup files 0 -> 1, 1 -> 2, etc.
    for ((i=num_days-1; i>0; i--)); do
        current_day=$((i - 1))
        if [ -f "${backup_path}/minecraft_day${current_day}.tar.gz" ]; then
            mv "${backup_path}/minecraft_day${current_day}.tar.gz" "${backup_path}/minecraft_day${i}.tar.gz"
        fi
    done

    # Create tha backup.
    tar -cpvzf "${backup_path}/minecraft_day0.tar.gz" "${world_paths[@]}"

        screen -R mc -xX stuff "save-on$(printf '\r')"
        screen -R mc -xX stuff "say Server backup complete. World now saving. $(printf '\r')"
    
    if [[ "$use_rclone" == "True" ]]; then
        # Move the existing rclone remote backup files 0 -> 1, 1 -> 2, etc.
        for ((i=num_days-1; i>0; i--)); do
            current_day=$((i - 1))
            rclone moveto "${rclone_remote}:minecraft_day${current_day}.tar.gz" "${rclone_remote}:minecraft_day${i}.tar.gz"
        done
        # Copy the new backup to the rclone remote
        rclone copy "${backup_path}/minecraft_day0.tar.gz" "${rclone_remote}:"
    fi
else
    echo "World not modified since most recent backup, no backup required. $(printf '\r')"
fi