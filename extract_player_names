#!/bin/bash

# Load the config.yml file
# parse_yaml function code credit Stefan Farestam: https://stackoverflow.com/questions/5014632/how-can-i-parse-a-yaml-file-from-a-linux-shell-script/21189044#21189044
function parse_yaml {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e 's|`||g;s|\$||g;' \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

eval $(parse_yaml /home/mcserver/minecraft/mc_backup/config.yml)

# Change the directory to the log folder
cd "$CONSTANTS_LOG_PATH"

# Initialize an associative array to store player names and their occurrence counts
declare -A player_counts
declare -A player_last_left_times
declare -A player_last_left_epoch_times

# Compress the latest.log file
gzip -c latest.log > latest.log.gz

# Find and sort the .gz files
log_files=$(find . -name '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-*.log.gz' | sort)

# Loop through each YYYY-MM-DD-X.log.gz file in the directory and latest.log.gz
for file in $log_files latest.log.gz; do
    # Use zcat to search for player names and count their occurrences
    # The regular expression ' left the game' will match lines with player names followed by ' left the game'
    # The date is parsed from the log filename, the time is parsed from the log line
    # Extract the date from the filename instead of the log line to handle logs with different date formats
    file_date=$(echo "$file" | grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}')
    while read -r line; do
        # Read each log line and extract the time and player name for lines that contain ' left the game'
        # If the line contains a time in the format [HH:MM:SS]
        if [[ $line =~ ^\[([0-9]{2}:[0-9]{2}:[0-9]{2})\] ]]; then
            time=${BASH_REMATCH[1]}
        # If the line contains a time in the format [DDMMMYYYY HH:MM:SS]
        elif [[ $line =~ ^\[([0-9]{2}[A-Za-z]{3}[0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3})\] ]]; then
            time=${BASH_REMATCH[1]:10:8}
        fi
        name=$(echo "$line" | grep -oE '[[:alnum:]_]+ left the game' | awk '{print $1}')
        if [[ -n "$name" ]]; then
            player_counts["$name"]=$(( player_counts["$name"] + 1 ))
            player_last_left_times["$name"]=$(date -d "$file_date $time" "+%Y-%m-%d %H:%M:%S")
            player_last_left_epoch_times["$name"]=$(date -d "$file_date $time" "+%s")
        fi
    done < <(zcat "$file" | grep -E '[[:alnum:]_]+ left the game')
done

# Delete the compressed copy of latest.log
rm latest.log.gz

# Find the latest player_last_left_epoch_time for player names with a count of at least PREFS_MINIMUM_PLAYS
most_recent_left_epoch_time=0
most_recent_left_name=" "
for name in "${!player_counts[@]}"; do
    count="${player_counts[$name]}"
    last_left_epoch_time="${player_last_left_epoch_times[$name]}"
    if (( count >= PREFS_MINIMUM_PLAYS )) && (( last_left_epoch_time > most_recent_left_epoch_time )); then
        most_recent_left_epoch_time="$last_left_epoch_time"
        most_recent_left_name="$name"
    fi
done

# Convert the most recent left epoch time to a human-readable format
most_recent_left_datetime=$(date -d "@$most_recent_left_epoch_time" "+%Y-%m-%d %H:%M:%S")

# Format the player names, counts, and most recent left times into a table
formatted_names=()
for name in "${!player_counts[@]}"; do
    count="${player_counts[$name]}"
    last_left_time="${player_last_left_times[$name]}"
    last_left_epoch_time="${player_last_left_epoch_times[$name]}"
    formatted_names+=("$name|$count|$last_left_time|$last_left_epoch_time")
done

# Print the table header
echo "Player Name|Count|Most Recent left Time|Epoch Time"

# Print the formatted player names, counts, and most recent left times in a table sorted by count in descending order
for name in "${formatted_names[@]}"; do
    echo "$name"
done | sort -t '|' -k2,2nr | column -t -s '|'

# Print the most recent left datetime
echo "Most recent left datetime for player with at least $PREFS_MINIMUM_PLAYS counts is: $most_recent_left_name at $most_recent_left_datetime"